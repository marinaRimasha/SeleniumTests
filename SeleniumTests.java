// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class TestEngineerSkillsTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void testEngineerSkills() {
    // Test name: testEngineerSkills
    // Step # | name | target | value | comment
    // 1 | open | / |  | 
    driver.get("https://ctco.lv/");
    // 2 | setWindowSize | 1108x864 |  | 
    driver.manage().window().setSize(new Dimension(1108, 864));
    // 3 | waitForElementPresent | css=.col-sm-9 > .text-block .button-bg | 30000 | Wait for "All vacancies" button to appear
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(".col-sm-9 > .text-block .button-bg")));
    }
    // 4 | click | css=.col-sm-9 > .text-block .button-bg |  | Click on "All vacancies" 
    driver.findElement(By.cssSelector(".col-sm-9 > .text-block .button-bg")).click();
    // 5 | waitForElementPresent | linkText=Test Automation Engineer | 30000 | Wait for "Test Automation Engineer" vacancy to be in list
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.presenceOfElementLocated(By.linkText("Test Automation Engineer")));
    }
    // 6 | click | linkText=Test Automation Engineer |  | Click the Automation Engineer vacancy
    driver.findElement(By.linkText("Test Automation Engineer")).click();
    // 7 | waitForElementVisible | css=.animated > .text-block p:nth-child(3) | 30000 | wait for vacancy skills to be visible
    {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(".animated > .text-block p:nth-child(3)")));
    }
    // 8 | verifyText | css=.animated > .text-block p:nth-child(3) | Experience in web application testing;\nExperience with automated testing tools and frameworks (for example: Selenium, REST Assured);\nUnderstanding of testing principles, practices and processes, good knowledge of SDLC;\nTeam player with good analytical and communication skills;\nGood level in English reading /speaking /writing, and good understanding of Latvian and Russian. | verify text about skills is present
    assertThat(driver.findElement(By.cssSelector(".animated > .text-block p:nth-child(3)")).getText(), is("Experience in web application testing;\\\\nExperience with automated testing tools and frameworks (for example: Selenium, REST Assured);\\\\nUnderstanding of testing principles, practices and processes, good knowledge of SDLC;\\\\nTeam player with good analytical and communication skills;\\\\nGood level in English reading /speaking /writing, and good understanding of Latvian and Russian."));
  }
}
